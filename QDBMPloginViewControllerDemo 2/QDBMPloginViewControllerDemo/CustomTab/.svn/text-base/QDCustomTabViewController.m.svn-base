//
//  QDCustomTabViewController.m
//  QDBMPloginViewControllerDemo
//
//  Created by Weber on 15/7/16.
//  Copyright (c) 2015年 tsci. All rights reserved.
//

#import "QDCustomTabViewController.h"
#import "QDTradeSettingViewController.h"
#import "QDTradeMoreViewController.h"

@interface QDCustomTabViewController ()<QDTradeSetingViewControllerDelegate, UIGestureRecognizerDelegate>

@property (nonatomic, strong)UIView *tabBarContainer; //tabBar容器类
@property (nonatomic, strong)UIView *contentViewContainer; //内容容器类
@property (nonatomic, strong)QDTradeSettingViewController *settingViewController; //设置界面
@property (nonatomic, strong)UIView *maskView; //掩盖界面
@property (nonatomic) BOOL isSettingViewDisplay;//从名字就能看出来了。。。

@property (nonatomic, strong)QDTradeMoreViewController *moreVC;



@end

@implementation QDCustomTabViewController


static const NSInteger TabBarHeight = 40; //tabBar的高度
static const NSInteger COM_TAG_OFFSET=1000; //tabBar的tag


- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
//    [QDTool adjustIOS7NavigationController:self];
    [self initialize];
    [self createUI];
    [self loadNavgatinBarConfig];
}

//加载NavgationBar
- (void)loadNavgatinBarConfig{
    self.navigationController.navigationBar.barTintColor =  UIColorFromRGBA(0x1d2228, 1.0);
    self.navigationController.navigationBar.translucent = NO;
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName:[UIColor whiteColor], NSFontAttributeName:[UIFont systemFontOfSize:18]}];
        self.title = NSLocalizedString(@"交易系统", @"");
    
    UIBarButtonItem *backBarbtn = [[UIBarButtonItem alloc] initWithTitle:NSLocalizedString(@"退出", @"") style:UIBarButtonItemStylePlain target:self action:@selector(backBarbtnAction:)];
    self.navigationItem.leftBarButtonItem = backBarbtn;
    
    UIBarButtonItem *rightBarbtn = [[UIBarButtonItem alloc] initWithTitle:@"● ● ●" style:UIBarButtonItemStylePlain target:self action:@selector(rightBarbtnAction:)];
    [rightBarbtn setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:12]} forState:UIControlStateNormal];
    
    self.navigationItem.rightBarButtonItem = rightBarbtn;
    
    //本来应该放到push之前的那个viewController中，但层级关系不对，无效。只能放入这个层级中来。
    UIBarButtonItem *backItem = [[UIBarButtonItem alloc] init];
    backItem.title = @"";
    self.navigationItem.backBarButtonItem = backItem;
}
//初始化
- (void)initialize{
    self.view.backgroundColor = [UIColor lightGrayColor];
    self.tabBarColor =  UIColorFromRGBA(0x1d2228, 1.0);
    _tabBarFontSize = 14;
    self.tabBarTextColor = [UIColor whiteColor];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(touchesBegan:) name:@"TOUCHBEGAN" object:nil];
    _isSettingViewDisplay = YES;
}

//创建UI
- (void)createUI{
   
    self.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
    
    //TabBar容器
    _tabBarContainer = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, TabBarHeight)];
    _tabBarContainer.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    _tabBarContainer.backgroundColor = self.tabBarColor;
    [self.view addSubview:_tabBarContainer];
 
    //内容容器
    _contentViewContainer = [UIView new];//alloc] initWithFrame:CGRectMake(0, CGRectGetMaxY(_tabBarContainer.frame), self.view.frame.size.width, self.view.bounds.size.height-CGRectGetMaxY(_tabBarContainer.frame)-64)];
    
    [self.view addSubview:_contentViewContainer];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 20, self.view.frame.size.width, 44)];
    label.textColor = [UIColor blackColor];
    label.textAlignment = NSTextAlignmentCenter;
    label.font = [UIFont systemFontOfSize:14];
    label.textAlignment = NSTextAlignmentCenter;
    label.text = @"weber's custom tabBarController";
    [_contentViewContainer addSubview:label];
    [self loadTabBar];
//
//    _maskView = [[UIView alloc] init];
//    _maskView.backgroundColor = [UIColor clearColor];
//    [self.navigationController.view addSubview:_maskView];
//    _settingViewController = [[QDTradeSettingViewController alloc] init];
//    _settingViewController.delegate = self;
//    _settingViewController.view.backgroundColor = [UIColor whiteColor];
//    [self.navigationController.view addSubview:_settingViewController.view];
   
    
    //添加手势
    UISwipeGestureRecognizer *swipeGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeToTheNextViewController:)];
    [swipeGesture setDirection:UISwipeGestureRecognizerDirectionRight];
    swipeGesture.delegate = self;
    [self.view addGestureRecognizer:swipeGesture];
    
    swipeGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeToTheNextViewController:)];
    
    [swipeGesture setDirection:UISwipeGestureRecognizerDirectionLeft];
    [self.view addGestureRecognizer:swipeGesture];
}


- (QDTradeMoreViewController*)moreVC{
    if(_moreVC == nil){
        _moreVC = [[QDTradeMoreViewController alloc] init];
        _moreVC.title = NSLocalizedString(@"更多", @"");
    }
    return _moreVC;
}

//当滑动边缘时，不识别手势，否则识别手势 刚好和appdelegate的区别开
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer{
    CGPoint point = [gestureRecognizer locationInView:gestureRecognizer.view];
    if(point.x <= 10)
        return NO;
    else
        return YES;
}


//调整布局
-(void)viewWillLayoutSubviews
{
    [super viewWillLayoutSubviews];
    
    [self layoutTabButtons];
    self.contentViewContainer.frame=CGRectMake(0, self.tabBarContainer.frame.origin.y+self.tabBarContainer.frame.size.height, self.view.frame.size.width, self.view.frame.size.height-self.tabBarContainer.frame.size.height-self.tabBarContainer.frame.origin.y);
//    self.settingViewController.view.frame = CGRectMake(-[UIScreen mainScreen].bounds.size.width*3/4, 0, -[UIScreen mainScreen].bounds.size.width*3/4, [UIScreen mainScreen].bounds.size.height);
}

//大小改变的时候自动调用
-(void)layoutTabButtons
{
    NSUInteger index = 0;
    NSUInteger count = [self.subViewControllers count];
    
    CGRect rect = CGRectMake(0, 0, floorf(self.tabBarContainer.bounds.size.width/count), self.tabBarContainer.bounds.size.height);
    NSArray *buttons = [self.tabBarContainer subviews];
    for(UIButton *button in buttons)
    {
        if(index == count - 1)
        {
            rect.size.width = self.tabBarContainer.bounds.size.width - rect.origin.x;
        }
        button.frame = rect;
        rect.origin.x += rect.size.width;
        
        ++index;
    }
}



//使用懒加载加载subViewControllers
- (void)setSubViewControllers:(NSArray *)subViewControllers{
    UIViewController *oldSelectedViewController=self.selectedViewController;
    for(UIViewController *vc in self.subViewControllers){
        [vc willMoveToParentViewController:nil];
        [vc removeFromParentViewController];
    }
    _subViewControllers = [subViewControllers copy];
    
    NSUInteger newIndex=[self.subViewControllers indexOfObject:oldSelectedViewController];
    if(newIndex!=NSNotFound)
    {
        _selectIndex=newIndex;
    }
    else if(newIndex <[self.subViewControllers count])
    {
        _selectIndex=newIndex;
    }
    else
    {
        _selectIndex=0;
    }
    
    for(UIViewController *vc in _subViewControllers){
        [self addChildViewController:vc];
        [self didMoveToParentViewController:self];
    }
    
    if([self isViewLoaded]){
        [self loadTabBar];
    }
  
}

- (UIViewController *)selectedViewController{
    if(self.selectIndex != NSNotFound){
        return [self.subViewControllers objectAtIndex:self.selectIndex];
    }else{
        return nil;
    }
}

- (void)setSelectedViewController:(UIViewController *)selectedViewController{
    NSUInteger index=[self.subViewControllers indexOfObject:selectedViewController];
    if(index != NSNotFound)
        [self setSelectedIndex:index animated:NO];
}
- (void)setSelectIndex:(NSInteger)selectIndex{
    [self setSelectedIndex:selectIndex animated:NO];
}

//切换动画核心
-(void)setSelectedIndex:(NSInteger)newSelectedIndex animated:(BOOL)animated{
    if(![self isViewLoaded]){
        _selectIndex = newSelectedIndex;
    }else if(_selectIndex != newSelectedIndex){
        UIViewController *fromViewController;
        UIViewController *toViewController;
        if(self.selectIndex != NSNotFound){
            UIButton *fromButton = (UIButton*)[self.tabBarContainer viewWithTag:self.selectIndex+COM_TAG_OFFSET];
            [self deselectTabButton:fromButton];
            fromViewController = self.selectedViewController;
        }
        NSUInteger oldSelectIndex = self.selectIndex;
        _selectIndex = newSelectedIndex;
        
        UIButton *toButton;
        if(self.selectIndex != NSNotFound){
            toButton = (UIButton *)[self.tabBarContainer viewWithTag:self.selectIndex+COM_TAG_OFFSET];
            [self selectTabButton:toButton];
            toViewController = self.selectedViewController;
        }
        
        if(toViewController == nil){
            [fromViewController.view removeFromSuperview];
        }else if(fromViewController == nil){
            CGRect frame = self.contentViewContainer.bounds;
            frame  = self.contentViewContainer.bounds;
            toViewController.view.frame = self.contentViewContainer.bounds;
            [self.contentViewContainer addSubview:toViewController.view];
        }else if(animated){
            CGRect rect = self.contentViewContainer.bounds;
            if(oldSelectIndex < newSelectedIndex){
                rect.origin.x = rect.size.width;
            }else{
                rect.origin.x = -rect.size.width;
            }
            toViewController.view.frame = rect;
            self.tabBarContainer.userInteractionEnabled = NO;
            
            [self transitionFromViewController:fromViewController toViewController:toViewController duration:0.3 options:UIViewAnimationOptionLayoutSubviews|UIViewAnimationOptionCurveEaseInOut animations:^{
                CGRect rect = fromViewController.view.frame;
                if(oldSelectIndex < newSelectedIndex){
                    rect.origin.x = -rect.size.width;
                }else{
                    rect.origin.x = rect.size.width;
                }
                
                fromViewController.view.frame = rect;
                toViewController.view.frame = self.contentViewContainer.bounds;
            }completion:^(BOOL finished){
                self.tabBarContainer.userInteractionEnabled = YES;
            }];
        }else{
            [fromViewController.view removeFromSuperview];
            toViewController.view.frame = self.contentViewContainer.bounds;
        }
    }
}

//按钮被选中
-(void)selectTabButton:(UIButton*)button
{
    
//    if([[QDTool getCurrentSkin] isEqualToString:QDBLACKSKIP])
//    {
//        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
//    }
//    else
//    {
//        [button setTitleColor:[QDTool hexStringToColor:@"#58c4fd"] forState:UIControlStateNormal];
//    }
//    [button setBackgroundImage:[UIImage imageNamed:[self imageNameForSelectedWithIndex:button.tag]]  forState:UIControlStateNormal];
    button.selected = NO;
    [UIView animateWithDuration:1 animations:^{
        button.selected = YES;
    }];
}

//按钮未被选中
-(void)deselectTabButton:(UIButton*)button
{
    
//    if([[QDTool getCurrentSkin] isEqualToString:QDBLACKSKIP])
//    {
//        [button setTitleColor:[QDTool hexStringToColor:@"#899198"] forState:UIControlStateNormal];
//    }
//    else
//    {
//        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
//    }
    
    
//    [button setBackgroundImage:[UIImage imageNamed:[self imageNameForUnSelectedWithIndex:button.tag]]  forState:UIControlStateNormal];
    
    
    button.selected = YES;
    [UIView animateWithDuration:1 animations:^{
        button.selected = NO;
    }];
}

- (void)removeTabBars{
    NSArray *tabBars = [self.tabBarContainer subviews];
    for(UIButton *button in tabBars){
        [button removeFromSuperview];
    }
}
//使用与不定长的标题
- (void)loadTabBarTranscript1{
    NSMutableArray *width = [NSMutableArray arrayWithCapacity:self.subViewControllers.count];
    CGFloat sumWidth = 0;
    for (UIViewController *vc in self.subViewControllers){
        CGSize temp = [QDTool getStringSizeWithString:vc.title font:[UIFont systemFontOfSize:self.tabBarFontSize] lableHeight:1000 width:100];
        sumWidth += temp.width;
        [width addObject:[NSNumber numberWithFloat:temp.width]];
    }
    CGFloat seperatorWidth = (self.tabBarContainer.bounds.size.width - sumWidth)/(self.subViewControllers.count*2);
    
    int i = 0;
    CGFloat lastWidth = 0;
    for(UIViewController *vc in self.subViewControllers){
        UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
        button.frame = CGRectMake(lastWidth, 0, [width[i] floatValue] +seperatorWidth*2, TabBarHeight);
        button.titleLabel.font = [UIFont systemFontOfSize:self.tabBarFontSize];
        button.backgroundColor = /*[UIColor colorWithRed:(25+i*30)/255.0 green:78.0/255 blue:25.0/255 alpha:1.0];*/self.tabBarColor;
        [button setTitleColor:self.tabBarTextColor forState:UIControlStateNormal];
        button.titleLabel.textAlignment = NSTextAlignmentCenter;
        [button setTitle:vc.title forState:UIControlStateNormal];
        [self.tabBarContainer addSubview:button];
        i++;
        lastWidth = CGRectGetMaxX(button.frame);
    }

}
//普通版
- (void)loadTabBar{
    [self removeTabBars];
    CGFloat avgWidth = self.tabBarContainer.frame.size.width / self.subViewControllers.count;
    int i = 0;
    for(UIViewController *vc in self.subViewControllers){
        UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
        button.frame = CGRectMake(avgWidth*i, 0, avgWidth, TabBarHeight);
        button.titleLabel.font = [UIFont systemFontOfSize:self.tabBarFontSize];
        button.backgroundColor = /*[UIColor colorWithRed:(25+i*30)/255.0 green:78.0/255 blue:25.0/255 alpha:1.0];*/self.tabBarColor;
        [button setTitleColor:self.tabBarTextColor forState:UIControlStateNormal];
        button.titleLabel.textAlignment = NSTextAlignmentCenter;
        [button setTitle:vc.title forState:UIControlStateNormal];
        [button addTarget:self action:@selector(tabBarPressAction:) forControlEvents:UIControlEventTouchDown];
        button.tag = COM_TAG_OFFSET+i;
        [self.tabBarContainer addSubview:button];
        i++;
    }
    NSInteger lastIndex = _selectIndex;
    _selectIndex = NSNotFound;
    self.selectIndex = lastIndex;
}

#pragma mark - TabBar Actions
- (void)tabBarPressAction:(UIButton*)button{
     [self setSelectedIndex:button.tag-COM_TAG_OFFSET animated:YES];
}
//这是个蛋
- (void)loadTabBarTranscript0{
    const NSInteger minWidth = 10;
   
    NSMutableArray *arrWidth = [NSMutableArray arrayWithCapacity:self.subViewControllers.count];
    for (int i=0; i<self.subViewControllers.count; i++) {
        NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:self.view.frame.size.width/self.subViewControllers.count], @"flag":[NSNumber numberWithBool:NO]};
        [arrWidth addObject:dic];
    }
    
    CGFloat tabBarWidth = 0;
    CGFloat lastWidth = 0;
    CGFloat flagWidth = 0;
    int flagCount = 0;
    for(int i=0; i<self.subViewControllers.count; i++){
    b:  tabBarWidth = i == 0 ? self.view.frame.size.width/self.subViewControllers.count : tabBarWidth;
        flagWidth = i == 0 ? 0 : flagWidth;
        flagCount = i == 0 ? 0 : flagCount;
       
    a:  lastWidth = i == 0 ? 0 : lastWidth;
       
        
        
        UIViewController *vc = self.subViewControllers[i];
        CGSize size = [QDTool getStringSizeWithString:vc.title font:[UIFont systemFontOfSize:self.tabBarFontSize] lableHeight:1000 width:1000];
        
        if(i==0 && ![[arrWidth[i] objectForKey:@"flag"] boolValue]){
            //如果第一个就比最大的大，那就回溯，并使fontsize减小
            if(size.width > self.view.frame.size.width-(self.subViewControllers.count-1)*minWidth || (self.view.frame.size.width-size.width)/(self.subViewControllers.count-1) < minWidth){
                self.tabBarFontSize -= 1;
                i = 0;
                for (int i=0; i<self.subViewControllers.count; i++) {
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:self.view.frame.size.width/self.subViewControllers.count], @"flag":[NSNumber numberWithBool:NO]};
                    arrWidth[i] = dic;
                }
                goto b;
            }else{
                
            if(tabBarWidth < size.width){
                    tabBarWidth = size.width+20;
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:tabBarWidth], @"flag":[NSNumber numberWithBool:YES]};
                    arrWidth[i] = dic;
//                    [arrWidth addObject:dic];//[NSNumber numberWithInteger:tabBarWidth]];
                    flagWidth += tabBarWidth;
                    flagCount++;
                }else{
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:tabBarWidth], @"flag":[NSNumber numberWithBool:NO]};
                    arrWidth[i] = dic;
//                    [arrWidth addObject:dic];//[NSNumber numberWithInteger:tabBarWidth]];
                }
                lastWidth += tabBarWidth;
                //从新计算平均宽度
                tabBarWidth = (self.view.frame.size.width-tabBarWidth-flagWidth)/(self.subViewControllers.count-1-flagCount);
            }
        }else if(![[arrWidth[i] objectForKey:@"flag"] boolValue]){
            //如果宽度大于剩余最大宽度
            if( size.width > self.view.frame.size.width-(self.subViewControllers.count-i-1-flagCount)*minWidth-lastWidth-flagWidth/*剩余最大宽度*/ || (self.view.frame.size.width-size.width-lastWidth-flagWidth)/(self.subViewControllers.count-i-1-flagCount) < minWidth ){
                self.tabBarFontSize -= 1;
                i = 0;
                for (int i=0; i<self.subViewControllers.count; i++) {
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:self.view.frame.size.width/self.subViewControllers.count], @"flag":[NSNumber numberWithBool:NO]};
                    arrWidth[i] = dic;
                }
                goto b;
            }else{
                
                if(tabBarWidth < size.width){
                    tabBarWidth = size.width+20;
                    //需要回溯回去重新计算以前的，方法设置一个标记
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:tabBarWidth], @"flag":[NSNumber numberWithBool:YES]};
                    flagWidth += tabBarWidth;
                    flagCount++;
                    arrWidth[i] = dic;
//                    [arrWidth addObject:dic];//[NSNumber numberWithInteger:tabBarWidth]];
                    tabBarWidth = (self.view.frame.size.width-flagWidth)/(self.subViewControllers.count-flagCount);
                    //回溯
                    i = 0;
                    goto a;
                
                }else{
                    NSDictionary *dic = @{@"width":[NSNumber numberWithInteger:tabBarWidth], @"flag":[NSNumber numberWithBool:NO]};
                    arrWidth[i] = dic;
                    //                    [arrWidth addObject:dic];//[NSNumber numberWithInteger:tabBarWidth]];
                    lastWidth += tabBarWidth;
                    //从新计算平均宽度
                    
                    int temp = self.view.frame.size.width-lastWidth - flagWidth;
                    temp = self.subViewControllers.count-i-1-flagCount;
                    if(temp != 0)
                        tabBarWidth = (self.view.frame.size.width-lastWidth-flagWidth)/(self.subViewControllers.count-i-1-flagCount);
                }
            }
        }
    }
        
    
    
    if(arrWidth.count != self.subViewControllers.count)
        return;
    
    int i = 0;
    lastWidth = 0;
    for(UIViewController *vc in self.subViewControllers){
        NSInteger width = [[arrWidth[i] objectForKey:@"width"] integerValue];
        UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
        button.frame = CGRectMake(lastWidth, 0, width, TabBarHeight);
        button.titleLabel.font = [UIFont systemFontOfSize:self.tabBarFontSize];
        button.backgroundColor = /*[UIColor colorWithRed:(25+i*30)/255.0 green:78.0/255 blue:25.0/255 alpha:1.0];*/self.tabBarColor;
        [button setTitleColor:self.tabBarTextColor forState:UIControlStateNormal];
        button.titleLabel.textAlignment = NSTextAlignmentCenter;
        [button setTitle:vc.title forState:UIControlStateNormal];
        [self.tabBarContainer addSubview:button];
        i++;
        lastWidth += width;
    }
        
}


#pragma mark - button action

- (void)backBarbtnAction:(UIBarButtonItem *)button{
//    if(self.isSettingViewDisplay){
//        
//        self.maskView.frame = [UIScreen mainScreen].bounds;
//        [UIView animateWithDuration:0.6 animations:^{
//            self.settingViewController.view.frame = CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width*3/4, [UIScreen mainScreen].bounds.size.height);
//            self.maskView.backgroundColor = [UIColor colorWithRed:1/255.0 green:1/255.0 blue:1/255.0 alpha:0.7];
//        }completion:^(BOOL finished){
//            self.isSettingViewDisplay = NO;
//        }];
//    }else{
//        [UIView animateWithDuration:0.6 animations:^{
//            self.settingViewController.view.frame = CGRectMake(-[UIScreen mainScreen].bounds.size.width*3/4, 0, [UIScreen mainScreen].bounds.size.width*3/4, [UIScreen mainScreen].bounds.size.height);
//            self.maskView.backgroundColor = [UIColor colorWithRed:1/255.0 green:1/255.0 blue:1/255.0 alpha:0];
//        }completion:^(BOOL finished){
//            self.isSettingViewDisplay = YES;
//            CGRect rect = [UIScreen mainScreen].bounds;
//            rect.origin.x = -rect.size.width;
//            self.maskView.frame = rect;
//        }];
//
//    }
    
}


- (void)rightBarbtnAction:(UIBarButtonItem *)button{
    NSLog(@"更多按钮按下");
    UIBarButtonItem *backItem = [[UIBarButtonItem alloc] init];
    backItem.title = @"";
    self.navigationItem.backBarButtonItem = backItem;
    [self.navigationController pushViewController:self.moreVC animated:YES];
    
}
#pragma mark -滑动切换视图
//滑动切换视图
-(void)swipeToTheNextViewController:(UISwipeGestureRecognizer*)swipe//(UISwipeGestureRecognizerDirection)direction
{
    if(swipe.direction==UISwipeGestureRecognizerDirectionRight)
    {
        
        
        if(self.selectIndex>0)
        {
            [self setSelectedIndex:self.selectIndex-1 animated:YES];
            
        }
        else
        {
            [self setSelectedIndex:self.subViewControllers.count-1 animated:YES];
            
        }
    }
    else if(swipe.direction==UISwipeGestureRecognizerDirectionLeft)
    {
        if(self.selectIndex<self.subViewControllers.count-1)
        {
            [self setSelectedIndex:self.selectIndex+1 animated:YES];
            
        }
        else
        {
            [self setSelectedIndex:0 animated:YES];
        }
    }
}


#pragma mark - touch began
- (void)touchesBegan:(NSNotification*)nofi{
    NSLog(@"I am appdelegate deliver");
    NSSet *touches = (NSSet*)nofi.object;
    UITouch *touch = [touches anyObject];
    if(self.maskView.frame.origin.x == 0){
        CGRect rect = CGRectMake([UIScreen mainScreen].bounds.size.width*3/4, 0, [UIScreen mainScreen].bounds.size.width*1/4, [UIScreen mainScreen].bounds.size.height);
        CGPoint point = [touch locationInView:self.navigationController.view];
        if(CGRectContainsPoint(rect, point))
            [self backBarbtnAction:nil];
    }
    self.isSettingViewDisplay = YES;
    
}

#pragma mark - QDTradeSettingViewControlerDelegate

- (void)panGestureDidEnd:(BOOL)isIn{
    if(isIn){
        CGRect rect = [UIScreen mainScreen].bounds;
        rect.origin.x = -rect.size.width;
        self.maskView.frame = rect;
        self.isSettingViewDisplay = YES;
    }else{
        self.isSettingViewDisplay = NO;
    }
}

- (void)panGestureWillEnd:(BOOL)isIn byRate:(CGFloat)rate{
    //拖拽时
    if(rate != 0){
        self.maskView.frame = [UIScreen mainScreen].bounds;
        self.maskView.backgroundColor = [UIColor colorWithRed:1/255.0 green:1/255.0 blue:1/255.0 alpha:0.7-rate];
        return;
    }
    //释放时
    if(isIn){
        self.maskView.backgroundColor = [UIColor colorWithRed:1/255.0 green:1/255.0 blue:1/255.0 alpha:0];
    }else{
        self.maskView.backgroundColor = [UIColor colorWithRed:1/255.0 green:1/255.0 blue:1/255.0 alpha:0.7];
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}





@end
